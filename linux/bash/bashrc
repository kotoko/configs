# Test for an interactive shell.
if [[ $- != *i* ]] ; then
	# Shell is non-interactive.  Be done now!
	return
fi

# Disable completion when the input buffer is empty.  i.e. Hitting tab
# and waiting a long time for bash to expand all of $PATH.
shopt -s no_empty_cmd_completion

# Enable history appending instead of overwriting when exiting.  #139609 (Gentoo bugzilla)
shopt -s histappend

# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.  #65623 (Gentoo bugzilla)
# http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)
shopt -s checkwinsize

# Change the window title of X terminals
case ${TERM} in
	[aEkx]term*|rxvt*|gnome*|konsole*|interix)
		PS1='\[\033]0;\u@\h:\w\007\]'
		;;
	screen*)
		PS1='\[\033k\u@\h:\w\033\\\]'
		;;
	*)
		unset PS1
		;;
esac

# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.
# We run dircolors directly due to its changes in file syntax and
# terminal name patching.
use_color=false
if type -P dircolors >/dev/null ; then
	# Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
	LS_COLORS=
	if [[ -f ~/.dir_colors ]] ; then
		eval "$(dircolors -b ~/.dir_colors)"
	elif [[ -f /etc/DIR_COLORS ]] ; then
		eval "$(dircolors -b /etc/DIR_COLORS)"
	else
		eval "$(dircolors -b)"
	fi
	# Note: We always evaluate the LS_COLORS setting even when it's the
	# default.  If it isn't set, then `ls` will only colorize by default
	# based on file attributes and ignore extensions (even the compiled
	# in defaults of dircolors). #583814
	if [[ -n ${LS_COLORS:+set} ]] ; then
		use_color=true
	else
		# Delete it if it's empty as it's useless in that case.
		unset LS_COLORS
	fi
else
	# Some systems (e.g. BSD & embedded) don't typically come with
	# dircolors so we need to hardcode some terminals in here.
	case ${TERM} in
	[aEkx]term*|rxvt*|gnome*|konsole*|screen|cons25|*color) use_color=true;;
	esac
fi

if ${use_color} ; then
	if [[ ${EUID} == 0 ]] ; then
		PS1+='\[\033[01;31m\]\h\[\033[01;34m\] \w \$\[\033[00m\] '
	else
		PS1+='\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] '
	fi

	alias ls='ls --color=auto'
	alias grep='grep --colour=auto'
	alias egrep='egrep --colour=auto'
	alias fgrep='fgrep --colour=auto'
else
	# show root@ when we don't have colors
	PS1+='\u@\h \w \$ '
fi

# Try to keep environment pollution down.
unset use_color sh

# Add info about git repo to prompt when available.
#if [ -f ~/.bash_git_integration ]; then
#	. ~/.bash_git_integration
#fi

# Aliases.
if [ -f ~/.bash_aliases ]; then
	. ~/.bash_aliases
fi

# Fix gpg over ssh.
GPG_TTY="$(tty)"
export GPG_TTY

# Custom binaries.
if [ -d "$HOME/.bin" ]; then
	PATH="$HOME/.bin:$PATH"
fi

# Add admins executables.
PATH="$PATH:/sbin:/usr/sbin"

# Function to color stderr to red.
# Found somewhere on stackoverflow.
color()(set -o pipefail;"$@" 2>&1>&3|sed $'s,.*,\e[91m&\e[m,'>&2)3>&1

# Show quick usage hints for given command.
function cheat() {
	curl "https://cht.sh/$1"
}

# "(screen)" prompt.
if [ "$TERM" = "screen" ] || [ "$TERM" = "screen.xterm-256color" ]; then
	export PS1="\[\e[1;33m\](screen)\[\033[0m\] $PS1"
fi

# Remember more bash history
# See also:
#   https://superuser.com/q/575479
export HISTSIZE=200000
export HISTFILESIZE=100000
export HISTFILE="$HOME/.bash_more_history"

# Show last used commands
function did() {
	NUM="15"
	if [ "$#" -ge 1 ]; then
		grep -- "$1" "$HISTFILE" | tail -n "$NUM"
	else
		tail -n "$NUM" "$HISTFILE"
	fi
}
